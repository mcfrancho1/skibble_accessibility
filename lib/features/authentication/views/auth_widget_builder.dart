import 'package:flutter/material.dart';
import 'package:provider/provider.dart';


import '../../../../controllers/loading_controller.dart';
import '../../../../controllers/skib_controller.dart';

import '../../../../services/change_data_notifiers/app_data.dart';
import '../../../../services/change_data_notifiers/cart_data.dart';
import '../../../../services/change_data_notifiers/chat_data.dart';
import '../../../../services/change_data_notifiers/feed_data.dart';
import '../../../../services/change_data_notifiers/firebase_data.dart';
import '../../../../services/change_data_notifiers/food_spots_data/meal_invite.dart';
import '../../../../services/change_data_notifiers/food_spots_data/spots_data.dart';
import '../../../../services/change_data_notifiers/map_data/gmap_connect_data.dart';
import '../../../../services/change_data_notifiers/map_data/mapbox_connect_data.dart';
import '../../../../services/change_data_notifiers/picker_data/date_time_picker_data.dart';
import '../../../../services/change_data_notifiers/picker_data/food_options_picker_data.dart';
import '../../../../services/change_data_notifiers/picker_data/location_picker_data.dart';
import '../../../../services/change_data_notifiers/picker_data/privacy_picker_data.dart';
import '../../../../features/meets/controllers/create_edit_meets_controller.dart';
import '../../../../features/meets/controllers/meets_bills_controller.dart';
import '../../../../features/meets/controllers/meets_controller.dart';
import '../../../../features/meets/controllers/meets_date_time_controller.dart';
import '../../../../features/meets/controllers/meets_filter_controller.dart';
import '../../../../features/meets/controllers/meets_location_controller.dart';
import '../../../../features/meets/controllers/meets_navigation_controller.dart';
import '../../../../features/meets/controllers/meets_privacy_controller.dart';
import '../../../controllers/feed_controller.dart';
import '../../../models/skibble_user.dart';
import '../../../services/change_data_notifiers/kitchens_data/kitchen_data.dart';
import '../../../services/change_data_notifiers/picker_data/accessibility_options_picker_data.dart';
import '../../../services/change_data_notifiers/skibs_data.dart';
import '../../../services/firebase/auth_services/skibble_auth_service.dart';
import '../../meets/controllers/meets_loading_controller.dart';
import '../controllers/auth_provider.dart';

/// Used to create user-dependent objects that need to be accessible by all widgets.
/// This widgets should live above the [MaterialApp].
/// See [AuthWidget], a descendant widget that consumes the snapshot generated by this builder.
///
/// Was converted from a stateless widget to a stateful widget because the authStateChanges was triggered twice
class AuthWidgetBuilder extends StatefulWidget {
  AuthWidgetBuilder({Key? key,
    // required this.authBuilder,
    required this.builder,
    // required this.waitingBuilder
  }) : super(key: key);
  final Widget Function(BuildContext, AsyncSnapshot<SkibbleUser?>) builder;
  // final Widget Function(BuildContext, AsyncSnapshot<SkibbleUser?>) authBuilder;

  // final Widget Function(BuildContext, SkibbleUser?) waitingBuilder;


  @override
  State<AuthWidgetBuilder> createState() => _AuthWidgetBuilderState();
}

class _AuthWidgetBuilderState extends State<AuthWidgetBuilder> {
  late final Stream<SkibbleUser?> userStream;

  @override
  void initState() {
    // TODO: implement initState
    // Provider.of<AppData>(context, listen: false).updateNavigatorKey();

    final authService = Provider.of<SkibbleAuthService>(context, listen: false);
    userStream = authService.onAuthStateChanged(context);
    Provider.of<AppData>(context, listen: false).welcomePageImage = const AssetImage('assets/images/skibble_group_photo_0.jpg');

    super.initState();

  }

  @override
  void didChangeDependencies() {
    // TODO: implement didChangeDependencies
    super.didChangeDependencies();
    precacheImage(Provider.of<AppData>(context, listen: false).welcomePageImage, context);

  }

  @override
  Widget build(BuildContext context) {
    final authService = Provider.of<SkibbleAuthService>(context, listen: false);
    return StreamBuilder<SkibbleUser?>(
      stream: userStream,
      builder: (BuildContext context, AsyncSnapshot<SkibbleUser?> snapshot) {

        //this will be called once because loading state is returned first
        if(snapshot.hasData) {
          SkibbleUser user = snapshot.data!;
          return MultiProvider(
            providers: [
              // Provider<SkibbleUser>.value(value: user),
              ChangeNotifierProvider(create: (context) => SkibbleAuthProvider(authService),),
              ChangeNotifierProvider(create: (context) => SkibsData(),),
              ChangeNotifierProvider(create: (context) => FeedController(ScrollController()),),
              ChangeNotifierProvider( create: (context) => SkibController(),),
              ChangeNotifierProvider(create: (context) => KitchensData(),),


              ChangeNotifierProvider<LoadingController>(create: (context) => LoadingController(),),
              ChangeNotifierProvider(create: (context) => MeetsFilterController(),),

              ChangeNotifierProvider<MeetsLoadingController>(create: (context) => MeetsLoadingController(),),


              ChangeNotifierProvider(create: (context) => LocationPickerData(),),
              ChangeNotifierProvider(create: (context) => DateTimePickerData(),),
              ChangeNotifierProvider(create: (context) => PrivacyPickerData(),),
              ChangeNotifierProvider(create: (context) => FoodOptionsPickerData(),),

              ChangeNotifierProvider(create: (context) => AccessibilityOptionsPickerData(),),
              ChangeNotifierProvider(create: (context) => ChatData(),),
              ChangeNotifierProvider(create: (context) => FirebaseData(),),



              //Skibble Meets
              ChangeNotifierProvider<CreateEditMeetsController>(
                create:(context) => CreateEditMeetsController(),
              ),
              ChangeNotifierProvider<MeetsDateTimeController>(
                create:(context) => MeetsDateTimeController(),
              ),
              ChangeNotifierProvider<MeetsLocationController>(
                create:(context) => MeetsLocationController(),
              ),

              ChangeNotifierProvider<MeetsPrivacyController>(
                create:(context) => MeetsPrivacyController(),
              ),
              ChangeNotifierProvider<MeetsBillsController>(
                create:(context) => MeetsBillsController(),
              ),


              if(user?.userId != null)
                ChangeNotifierProvider<MeetsController>(create: (context) => MeetsController()..listenForNearbyMeets(context, user!),),

            ],
            child: widget.builder(context, snapshot),
          );
        }

        //login and signup page
        return MultiProvider(
          providers: [
            ChangeNotifierProvider(
              create: (context) => SkibbleAuthProvider(authService),
            ),
            ChangeNotifierProvider<LoadingController>(create: (context) => LoadingController(),),

          ],
          child: widget.builder(context, snapshot),
        );
      },
    );

    ///
    // return BetterStreamBuilder<SkibbleUser>(
    //   stream: userStream,
    //   builder: (BuildContext context,  snapshot) {
    //     SkibbleUser? user = snapshot;
    //     print('lol');
    //
    //
    //     // FriendRequestsDatabaseService().streamFollowings(user.userId!)!.listen((event) {
    //     // },
    //     // var navigatorKey = Provider.of<AppData>(context, listen: false).navigatorKey;
    //     //     onError: (e) {print(e);});
    //     return MultiProvider(
    //       providers: [
    //         // Provider<SkibbleUser>.value(value: user),
    //         ChangeNotifierProvider(create: (context) => SkibbleAuthProvider(authService),),
    //         ChangeNotifierProvider(create: (context) => SkibsData(),),
    //         ChangeNotifierProvider(create: (context) => UsersDataController(),),
    //         ChangeNotifierProvider(create: (context) => FeedController(ScrollController()),),
    //         ChangeNotifierProvider( create: (context) => SkibController(),),
    //         // ChangeNotifierProvider( create: (context) => StreamChatController()..initStreamChatClient(),),
    //         ChangeNotifierProvider( create: (context) => RecipeController(),),
    //         ChangeNotifierProvider(create: (context) => LocaleNotifier(),),
    //         ChangeNotifierProvider(create: (context) => CartData(),),
    //         ChangeNotifierProvider(create: (context) => FeedData(),),
    //         ChangeNotifierProvider(create: (context) => KitchensData(),),
    //         ChangeNotifierProvider(create: (context) => CustomSearchController(),),
    //         ChangeNotifierProvider(create: (context) => ChatController(),),
    //         ChangeNotifierProvider(create: (context) => AudioRecorderController(),),
    //         ChangeNotifierProvider(create: (context) => ProfileController(),),
    //         ChangeNotifierProvider(create: (context) => VerificationStepController(),),
    //
    //         ChangeNotifierProvider(
    //           create: (context) => VoiceMessageController(),
    //         ),
    //
    //         ChangeNotifierProvider(
    //           create: (context) => PollController(),
    //         ),
    //         // ChangeNotifierProvider(create: (context) => MapboxConnectData(),),
    //         ChangeNotifierProvider<FilePickerController>(create: (context) => FilePickerController(),),
    //         ChangeNotifierProvider<LoadingController>(create: (context) => LoadingController(),),
    //         ChangeNotifierProvider(create: (context) => MeetsFilterController(),),
    //         ChangeNotifierProvider(create: (context) => MeetsNavigationController(),),
    //         ChangeNotifierProvider<FriendRecommendationController>(create: (context) => FriendRecommendationController(),),
    //
    //         ChangeNotifierProvider<MeetsLoadingController>(create: (context) => MeetsLoadingController(),),
    //         ChangeNotifierProvider<PhotoViewController>(create: (context) => PhotoViewController(),),
    //
    //
    //
    //         ChangeNotifierProvider(create: (context) => GMapConnectData(),),
    //         ChangeNotifierProvider(create: (context) => SpotsData(),),
    //         ChangeNotifierProvider(create: (context) => MealInviteData(),),
    //         ChangeNotifierProvider(create: (context) => LocationPickerData(),),
    //         ChangeNotifierProvider(create: (context) => DateTimePickerData(),),
    //         ChangeNotifierProvider(create: (context) => PrivacyPickerData(),),
    //         ChangeNotifierProvider(create: (context) => FoodOptionsPickerData(),),
    //         // ChangeNotifierProvider(create: (context) => CustomFeedData(),),
    //         ChangeNotifierProvider(create: (context) => ChatData(),),
    //         ChangeNotifierProvider(create: (context) => FirebaseData(),),
    //
    //
    //         ///Skibble communities
    //         ChangeNotifierProvider<CreateEditCommunityController>(
    //           create:(context) => CreateEditCommunityController(),
    //         ),
    //         ChangeNotifierProvider<CommunityPrivacyController>(
    //           create:(context) => CommunityPrivacyController(),
    //         ),
    //         ChangeNotifierProvider<CommunityLoadingController>(
    //           create: (context) => CommunityLoadingController(),),
    //         ChangeNotifierProvider(create: (context) => CommunityController(),),
    //
    //
    //         //Skibble Communitites channels
    //         ChangeNotifierProvider<CreateEditChannelController>(
    //           create:(context) => CreateEditChannelController(),
    //         ),
    //         ChangeNotifierProvider<ChannelPrivacyController>(
    //           create:(context) => ChannelPrivacyController(),
    //         ),
    //         ChangeNotifierProvider<CommunityChannelController>(
    //           create:(context) => CommunityChannelController(),
    //         ),
    //
    //         ///Skibble Polls
    //         ChangeNotifierProvider<CreateEditPollController>(
    //           create:(context) => CreateEditPollController(),
    //         ),
    //
    //         //Skibble Meets
    //         ChangeNotifierProvider<CreateEditMeetsController>(
    //           create:(context) => CreateEditMeetsController(),
    //         ),
    //         ChangeNotifierProvider<MeetsDateTimeController>(
    //           create:(context) => MeetsDateTimeController(),
    //         ),
    //         ChangeNotifierProvider<MeetsLocationController>(
    //           create:(context) => MeetsLocationController(),
    //         ),
    //
    //         ChangeNotifierProvider<MeetsPrivacyController>(
    //           create:(context) => MeetsPrivacyController(),
    //         ),
    //         ChangeNotifierProvider<MeetsBillsController>(
    //           create:(context) => MeetsBillsController(),
    //         ),
    //
    //
    //         if(user?.userId != null)
    //           ChangeNotifierProvider<MeetsController>(create: (context) => MeetsController()..listenForNearbyMeets(context, user!),),
    //
    //         //streaming followers
    //         if(user?.userId != null)
    //           StreamProvider<FollowersStream?>.value(
    //             initialData: FollowersStream([]),
    //             value: FriendRequestsDatabaseService().streamFollowersData(user!.userId!, context: context),),
    //
    //         //streaming followings
    //         if(user?.userId != null)
    //           StreamProvider<FollowingsStream?>.value(
    //             initialData: FollowingsStream([]),
    //             value: FriendRequestsDatabaseService().streamFollowingsData(user!.userId!),
    //           ),
    //
    //         //streaming users who blocked me
    //         if(user?.userId != null)
    //           StreamProvider<UsersWhoBlockedMeStream?>.value(
    //             initialData: UsersWhoBlockedMeStream([]),
    //             value: UserDatabaseService().streamUsersWhoBlockedMe(user!.userId!, context),),
    //
    //         //users I blocked
    //         if(user?.userId != null)
    //           StreamProvider<UsersIBlockedStream?>.value(
    //             initialData: UsersIBlockedStream([]),
    //             value: UserDatabaseService().streamUsersIBlocked(user!.userId!, context),),
    //
    //
    //         if(user?.userId != null)
    //           StreamProvider<LikedSkibsStream?>.value(
    //             initialData: LikedSkibsStream([]),
    //             value: FeedDatabaseService().streamLikedSkibsData(user!.userId!),),
    //
    //         if(user?.userId != null)
    //           StreamProvider<MemberCommunitiesStream?>.value(
    //             initialData: MemberCommunitiesStream([]),
    //             lazy: false,
    //             value: CommunityDatabase().streamMemberCommunitiesData(user!.userId!),
    //           ),
    //
    //
    //         if(user?.userId != null)
    //           StreamProvider<MemberCommunityChannelsStream?>.value(
    //             initialData: MemberCommunityChannelsStream([]),
    //             lazy: false,
    //             value: CommunityChannelDatabase().streamMemberCommunityChannels(user!.userId!),
    //           ),
    //
    //
    //         if(user?.userId != null)
    //           StreamProvider<LikedCommunityMessagesStream?>.value(
    //             initialData: LikedCommunityMessagesStream([]),
    //             lazy: false,
    //             value: CommunityDatabase().streamLikedCommunityMessagesData(user!.userId!),
    //           ),
    //
    //         if(user?.userId != null)
    //           StreamProvider<LikedCommunityMessagesRepliesStream?>.value(
    //             initialData: LikedCommunityMessagesRepliesStream([]),
    //             lazy: false,
    //             value: CommunityDatabase().streamLikedCommunityMessagesRepliesData(user!.userId!),
    //           ),
    //
    //         if(user?.userId != null)
    //           StreamProvider<LikedRecipesStream?>.value(
    //             initialData: LikedRecipesStream([]),
    //             value: RecipeDatabaseService().streamLikedRecipesStream(user!.userId!),
    //
    //           ),
    //
    //
    //         if(user?.userId != null)
    //           StreamProvider<List<CustomNotification>>.value(
    //             initialData: [],
    //             value: NotificationsDatabaseService().userNotificationsStream(user!.userId!, context),
    //           ),
    //         // NOTE: Any other user-bound providers here can be added here
    //       ],
    //       child: widget.onDoneBuilder(context, user),
    //     );
    //   },
    //   noDataBuilder: (context) {
    //     print('olo');
    //     return widget.onDoneBuilder(context, null);
    //   },
    // );
    //
  }
}
//
// class DoneBuilder extends StatelessWidget {
//   const DoneBuilder({super.key, required this.user});
//   final SkibbleUser? user;
//
//   @override
//   Widget build(BuildContext context) {
//     final authService = Provider.of<SkibbleAuthService>(context, listen: false);
//
//     return MultiProvider(
//       providers: [
//         // Provider<SkibbleUser>.value(value: user),
//         ChangeNotifierProvider(create: (context) => SkibbleAuthProvider(authService),),
//         ChangeNotifierProvider(create: (context) => SkibsData(),),
//         ChangeNotifierProvider(create: (context) => UsersDataController(),),
//         ChangeNotifierProvider(create: (context) => FeedController(ScrollController()),),
//         ChangeNotifierProvider( create: (context) => SkibController(),),
//         // ChangeNotifierProvider( create: (context) => StreamChatController()..initStreamChatClient(),),
//         ChangeNotifierProvider( create: (context) => RecipeController(),),
//         ChangeNotifierProvider(create: (context) => LocaleNotifier(),),
//         ChangeNotifierProvider(create: (context) => CartData(),),
//         ChangeNotifierProvider(create: (context) => FeedData(),),
//         ChangeNotifierProvider(create: (context) => KitchensData(),),
//         ChangeNotifierProvider(create: (context) => CustomSearchController(),),
//         ChangeNotifierProvider(create: (context) => ChatController(),),
//         ChangeNotifierProvider(create: (context) => AudioRecorderController(),),
//         ChangeNotifierProvider(create: (context) => ProfileController(),),
//         ChangeNotifierProvider(create: (context) => VerificationStepController(),),
//
//         ChangeNotifierProvider(
//           create: (context) => VoiceMessageController(),
//         ),
//
//         ChangeNotifierProvider(
//           create: (context) => PollController(),
//         ),
//         // ChangeNotifierProvider(create: (context) => MapboxConnectData(),),
//         ChangeNotifierProvider<FilePickerController>(create: (context) => FilePickerController(),),
//         ChangeNotifierProvider<LoadingController>(create: (context) => LoadingController(),),
//         ChangeNotifierProvider(create: (context) => MeetsFilterController(),),
//         ChangeNotifierProvider(create: (context) => MeetsNavigationController(),),
//         ChangeNotifierProvider<FriendRecommendationController>(create: (context) => FriendRecommendationController(),),
//
//         ChangeNotifierProvider<MeetsLoadingController>(create: (context) => MeetsLoadingController(),),
//         ChangeNotifierProvider<PhotoViewController>(create: (context) => PhotoViewController(),),
//
//
//
//         ChangeNotifierProvider(create: (context) => GMapConnectData(),),
//         ChangeNotifierProvider(create: (context) => SpotsData(),),
//         ChangeNotifierProvider(create: (context) => MealInviteData(),),
//         ChangeNotifierProvider(create: (context) => LocationPickerData(),),
//         ChangeNotifierProvider(create: (context) => DateTimePickerData(),),
//         ChangeNotifierProvider(create: (context) => PrivacyPickerData(),),
//         ChangeNotifierProvider(create: (context) => FoodOptionsPickerData(),),
//         // ChangeNotifierProvider(create: (context) => CustomFeedData(),),
//         ChangeNotifierProvider(create: (context) => ChatData(),),
//         ChangeNotifierProvider(create: (context) => FirebaseData(),),
//
//
//         ///Skibble communities
//         ChangeNotifierProvider<CreateEditCommunityController>(
//           create:(context) => CreateEditCommunityController(),
//         ),
//         ChangeNotifierProvider<CommunityPrivacyController>(
//           create:(context) => CommunityPrivacyController(),
//         ),
//         ChangeNotifierProvider<CommunityLoadingController>(
//           create: (context) => CommunityLoadingController(),),
//         ChangeNotifierProvider(create: (context) => CommunityController(),),
//
//
//         //Skibble Communitites channels
//         ChangeNotifierProvider<CreateEditChannelController>(
//           create:(context) => CreateEditChannelController(),
//         ),
//         ChangeNotifierProvider<ChannelPrivacyController>(
//           create:(context) => ChannelPrivacyController(),
//         ),
//         ChangeNotifierProvider<CommunityChannelController>(
//           create:(context) => CommunityChannelController(),
//         ),
//
//         ///Skibble Polls
//         ChangeNotifierProvider<CreateEditPollController>(
//           create:(context) => CreateEditPollController(),
//         ),
//
//         //Skibble Meets
//         ChangeNotifierProvider<CreateEditMeetsController>(
//           create:(context) => CreateEditMeetsController(),
//         ),
//         ChangeNotifierProvider<MeetsDateTimeController>(
//           create:(context) => MeetsDateTimeController(),
//         ),
//         ChangeNotifierProvider<MeetsLocationController>(
//           create:(context) => MeetsLocationController(),
//         ),
//
//         ChangeNotifierProvider<MeetsPrivacyController>(
//           create:(context) => MeetsPrivacyController(),
//         ),
//         ChangeNotifierProvider<MeetsBillsController>(
//           create:(context) => MeetsBillsController(),
//         ),
//
//
//         if(user?.userId != null)
//           ChangeNotifierProvider<MeetsController>(create: (context) => MeetsController()..listenForNearbyMeets(context, user!),),
//
//         //streaming followers
//         if(user?.userId != null)
//           StreamProvider<FollowersStream?>.value(
//             initialData: FollowersStream([]),
//             value: FriendRequestsDatabaseService().streamFollowersData(user!.userId!, context: context),),
//
//         //streaming followings
//         if(user?.userId != null)
//           StreamProvider<FollowingsStream?>.value(
//             initialData: FollowingsStream([]),
//             value: FriendRequestsDatabaseService().streamFollowingsData(user!.userId!),
//           ),
//
//         //streaming users who blocked me
//         if(user?.userId != null)
//           StreamProvider<UsersWhoBlockedMeStream?>.value(
//             initialData: UsersWhoBlockedMeStream([]),
//             value: UserDatabaseService().streamUsersWhoBlockedMe(user!.userId!, context),),
//
//         //users I blocked
//         if(user?.userId != null)
//           StreamProvider<UsersIBlockedStream?>.value(
//             initialData: UsersIBlockedStream([]),
//             value: UserDatabaseService().streamUsersIBlocked(user!.userId!, context),),
//
//
//         if(user?.userId != null)
//           StreamProvider<LikedSkibsStream?>.value(
//             initialData: LikedSkibsStream([]),
//             value: FeedDatabaseService().streamLikedSkibsData(user!.userId!),),
//
//         if(user?.userId != null)
//           StreamProvider<MemberCommunitiesStream?>.value(
//             initialData: MemberCommunitiesStream([]),
//             lazy: false,
//             value: CommunityDatabase().streamMemberCommunitiesData(user!.userId!),
//           ),
//
//
//         if(user?.userId != null)
//           StreamProvider<MemberCommunityChannelsStream?>.value(
//             initialData: MemberCommunityChannelsStream([]),
//             lazy: false,
//             value: CommunityChannelDatabase().streamMemberCommunityChannels(user!.userId!),
//           ),
//
//
//         if(user?.userId != null)
//           StreamProvider<LikedCommunityMessagesStream?>.value(
//             initialData: LikedCommunityMessagesStream([]),
//             lazy: false,
//             value: CommunityDatabase().streamLikedCommunityMessagesData(user!.userId!),
//           ),
//
//         if(user?.userId != null)
//           StreamProvider<LikedCommunityMessagesRepliesStream?>.value(
//             initialData: LikedCommunityMessagesRepliesStream([]),
//             lazy: false,
//             value: CommunityDatabase().streamLikedCommunityMessagesRepliesData(user!.userId!),
//           ),
//
//         if(user?.userId != null)
//           StreamProvider<LikedRecipesStream?>.value(
//             initialData: LikedRecipesStream([]),
//             value: RecipeDatabaseService().streamLikedRecipesStream(user!.userId!),
//
//           ),
//
//
//         if(user?.userId != null)
//           StreamProvider<List<CustomNotification>>.value(
//             initialData: [],
//             value: NotificationsDatabaseService().userNotificationsStream(user!.userId!, context),
//           ),
//         // NOTE: Any other user-bound providers here can be added here
//       ],
//       child: widget.onDoneBuilder(context, user),
//     );
//   }
// }
